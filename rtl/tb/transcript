# do simulate.tcl
# ** Warning: (vlib-34) Library already exists at "work".
# Model Technology ModelSim SE-64 vlog 10.7d Compiler 2019.02 Feb 15 2019
# Start time: 16:40:41 on Jan 27,2025
# vlog -sv ../src/Address_Translation_Table.v 
# -- Compiling module Address_Translation_Table
# 
# Top level modules:
# 	Address_Translation_Table
# End time: 16:40:41 on Jan 27,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# Model Technology ModelSim SE-64 vlog 10.7d Compiler 2019.02 Feb 15 2019
# Start time: 16:40:41 on Jan 27,2025
# vlog -sv /home/harim_choe/Solving-SAT-in-FPGA-UCSB/rtl/tb/Address_Translation_Table_tb.v 
# -- Compiling module Address_Translation_Table_tb
# 
# Top level modules:
# 	Address_Translation_Table_tb
# End time: 16:40:41 on Jan 27,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -c Address_Translation_Table_tb -do "run -all; quit" 
# Start time: 16:40:41 on Jan 27,2025
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# //  ModelSim SE-64 10.7d Feb 15 2019 Linux 4.18.0-553.27.1.el8_10.x86_64
# //
# //  Copyright 1991-2019 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim SE-64 and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# Loading sv_std.std
# Loading work.Address_Translation_Table_tb(fast)
# run -all
# Address Translation Table Initialized.
# Time=0 | clk=0 | axi_wr_en=0 | axi_wr_addr=0000 | axi_wr_data=00000000 | rd_addr=000 | mask_out=00000000000000000000 | addr_out=00000000000 | att_axi_rd_data=00000000
# Read operation: Address = 0, Data = 0 (Addr_o = 0, Mask_o = 0)
# Time=5000 | clk=1 | axi_wr_en=0 | axi_wr_addr=0000 | axi_wr_data=00000000 | rd_addr=000 | mask_out=00000000000000000000 | addr_out=00000000000 | att_axi_rd_data=00000000
# TEST 1: Checking reset behavior...
# TEST 1 PASSED: Reset behavior is correct
# Time=10000 | clk=0 | axi_wr_en=1 | axi_wr_addr=0001 | axi_wr_data=555f0f0f | rd_addr=000 | mask_out=00000000000000000000 | addr_out=00000000000 | att_axi_rd_data=00000000
# Write operation: Address = 1, Data = 555f0f0f
# Read operation: Address = 0, Data = 0 (Addr_o = 0, Mask_o = 0)
# Time=15000 | clk=1 | axi_wr_en=1 | axi_wr_addr=0001 | axi_wr_data=555f0f0f | rd_addr=000 | mask_out=00000000000000000000 | addr_out=00000000000 | att_axi_rd_data=00000000
# Time=20000 | clk=0 | axi_wr_en=0 | axi_wr_addr=0001 | axi_wr_data=555f0f0f | rd_addr=001 | mask_out=00000000000000000000 | addr_out=00000000000 | att_axi_rd_data=00000000
# Read operation: Address = 1, Data = 0 (Addr_o = 0, Mask_o = 0)
# Time=25000 | clk=1 | axi_wr_en=0 | axi_wr_addr=0001 | axi_wr_data=555f0f0f | rd_addr=001 | mask_out=11110000111100001111 | addr_out=10101010101 | att_axi_rd_data=555f0f0f
# TEST 2 PASSED: Write and read back values are correct
# Time=30000 | clk=0 | axi_wr_en=1 | axi_wr_addr=0002 | axi_wr_data=2aa0f0f0 | rd_addr=001 | mask_out=11110000111100001111 | addr_out=10101010101 | att_axi_rd_data=555f0f0f
# Write operation: Address = 2, Data = 2aa0f0f0
# Read operation: Address = 1, Data = 555f0f0f (Addr_o = 555, Mask_o = f0f0f)
# Time=35000 | clk=1 | axi_wr_en=1 | axi_wr_addr=0002 | axi_wr_data=2aa0f0f0 | rd_addr=001 | mask_out=11110000111100001111 | addr_out=10101010101 | att_axi_rd_data=555f0f0f
# Time=40000 | clk=0 | axi_wr_en=0 | axi_wr_addr=0002 | axi_wr_data=2aa0f0f0 | rd_addr=002 | mask_out=11110000111100001111 | addr_out=10101010101 | att_axi_rd_data=555f0f0f
# Read operation: Address = 2, Data = 555f0f0f (Addr_o = 555, Mask_o = f0f0f)
# Time=45000 | clk=1 | axi_wr_en=0 | axi_wr_addr=0002 | axi_wr_data=2aa0f0f0 | rd_addr=002 | mask_out=00001111000011110000 | addr_out=01010101010 | att_axi_rd_data=2aa0f0f0
# TEST 3 PASSED: Random access with negated literal correct
# TEST 4: Checking att_axi_rd_data concatenation...
# TEST 4 PASSED: att_axi_rd_data matches output signals correctly
# Time=50000 | clk=0 | axi_wr_en=1 | axi_wr_addr=0003 | axi_wr_data=7ffaaaaa | rd_addr=002 | mask_out=00001111000011110000 | addr_out=01010101010 | att_axi_rd_data=2aa0f0f0
# Write operation: Address = 3, Data = 7ffaaaaa
# Read operation: Address = 2, Data = 2aa0f0f0 (Addr_o = 2aa, Mask_o = f0f0)
# Time=55000 | clk=1 | axi_wr_en=1 | axi_wr_addr=0003 | axi_wr_data=7ffaaaaa | rd_addr=002 | mask_out=00001111000011110000 | addr_out=01010101010 | att_axi_rd_data=2aa0f0f0
# Time=60000 | clk=0 | axi_wr_en=0 | axi_wr_addr=0003 | axi_wr_data=7ffaaaaa | rd_addr=003 | mask_out=00001111000011110000 | addr_out=01010101010 | att_axi_rd_data=2aa0f0f0
# Read operation: Address = 3, Data = 2aa0f0f0 (Addr_o = 2aa, Mask_o = f0f0)
# Time=65000 | clk=1 | axi_wr_en=0 | axi_wr_addr=0003 | axi_wr_data=7ffaaaaa | rd_addr=003 | mask_out=10101010101010101010 | addr_out=11111111111 | att_axi_rd_data=7ffaaaaa
# TEST 5 PASSED: Read with negated literal works correctly
# All tests completed.
# ** Note: $stop    : /home/harim_choe/Solving-SAT-in-FPGA-UCSB/rtl/tb/Address_Translation_Table_tb.v(131)
#    Time: 70 ns  Iteration: 0  Instance: /Address_Translation_Table_tb
# Break at /home/harim_choe/Solving-SAT-in-FPGA-UCSB/rtl/tb/Address_Translation_Table_tb.v line 131
# Stopped at /home/harim_choe/Solving-SAT-in-FPGA-UCSB/rtl/tb/Address_Translation_Table_tb.v line 131
#  quit
# End time: 16:40:41 on Jan 27,2025, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
